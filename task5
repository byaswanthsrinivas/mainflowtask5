{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "27c3f4cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement PIL (from versions: none)\n",
      "ERROR: No matching distribution found for PIL\n"
     ]
    }
   ],
   "source": [
    "pip install PIL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4b6c9f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import *\n",
    "from tkinter import ttk\n",
    "from datetime import datetime\n",
    "import requests\n",
    "from PIL import ImageTk, Image\n",
    "from tkinter import messagebox\n",
    "\n",
    "root = tk.Tk()\n",
    "root.geometry(\"600x270\")\n",
    "root.title(\"Currency Converter\")\n",
    "root.iconbitmap('icon.ico')\n",
    "root.maxsize(600,270)\n",
    "root.minsize(600,270)\n",
    "\n",
    "image = Image.open('currency.png')\n",
    "zoom = 0.15\n",
    "\n",
    "# multiple image size by zoom\n",
    "pixels_x, pixels_y = tuple([int(zoom*x) for x in image.size])\n",
    "\n",
    "img = ImageTk.PhotoImage(image.resize((pixels_x,pixels_y)))\n",
    "panel = Label(root,image=img)\n",
    "panel.place(x=205,y=30)\n",
    "\n",
    "def show_data():\n",
    "    amount = E1.get()\n",
    "    from_currency = c1.get()\n",
    "    to_currency = c2.get()\n",
    "    \n",
    "\n",
    "    if amount == '':\n",
    "        messagebox.showerror(\"Currency Converter\", \"Please Fill the Amount\")\n",
    "    elif from_currency == '':\n",
    "        messagebox.showerror(\"Currency Converter\", \"Please Choose the From Currency\")\n",
    "    elif to_currency == '':\n",
    "        messagebox.showerror(\"Currency Converter\", \"Please Choose the To Currency\")\n",
    "        \n",
    "    else:\n",
    "        \n",
    "        url = f\"https://api.apilayer.com/currency_data/convert?to={to_currency}&from={from_currency}&amount={amount}\"\n",
    "        payload = {}\n",
    "        headers = {\n",
    "        \"apikey\": \"0aF6sSIX42bNDjTbur689YBGXJeBBfBR\"\n",
    "        }\n",
    "        response = requests.request(\"GET\", url, headers=headers, data=payload)\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            if data['success']:\n",
    "                result = data['result']\n",
    "                E2.delete(0, END)\n",
    "                E2.insert(0, result)\n",
    "                text.insert('end', f'{amount} {from_currency} equals {result} {to_currency} \\n\\nLast Updated: {datetime.now()}\\n\\n')\n",
    "            else:\n",
    "                messagebox.showerror(\"Currency Converter\", \"Failed to retrieve data\")\n",
    "        else:\n",
    "            messagebox.showerror(\"Currency Converter\", \"Error fetching data\")\n",
    "            \n",
    "def clear():\n",
    "    E1.delete(0,'end')\n",
    "    E2.delete(0,'end')\n",
    "    text.delete(1.0,'end')\n",
    "    \n",
    "l1 = Label(root,text=\"USD Currency Converter Using Python\",font={'verdana','10','bold'})\n",
    "l1.place(x=150,y=5)\n",
    "\n",
    "amt = Label(root,text=\"Amount\",font=('roboto',10,'bold'))\n",
    "amt.place(x=20,y=15)\n",
    "E1 = Entry(root,width=20,borderwidth=1,font=('roboto',10,'bold'))\n",
    "E1.place(x=20,y=40)\n",
    "\n",
    "c1 = tk.StringVar()\n",
    "c2 = tk.StringVar()\n",
    "currencychoose1 = ttk.Combobox(root,width=20,textvariable = c1,state='readonly',font=('verdana',\"10\",'bold'))\n",
    "\n",
    "# Adding Comobox drop down list\n",
    "currencychoose1['values'] = ( 'USD',)\n",
    "\n",
    "currencychoose1.place(x=300,y=40)\n",
    "currencychoose1.current(0)\n",
    "\n",
    "E2 = Entry(root,width=20,borderwidth=1,font=('roboto',10,'bold'))\n",
    "E2.place(x=20,y=80)\n",
    "\n",
    "currencychoose2 = ttk.Combobox(root,width=20, textvariable = c2,state='readonly',font=('verdana','10','bold'))\n",
    "\n",
    "currencychoose2['values'] = (\n",
    "                            \"AED\", \"AFN\", \"ALL\", \"AMD\", \"ANG\", \"AOA\", \"ARS\", \"AUD\", \"AWG\", \"AZN\", \"BAM\", \n",
    "    \"BBD\", \"BDT\", \"BGN\", \"BHD\", \"BIF\", \"BMD\", \"BND\", \"BOB\", \"BRL\", \"BSD\", \"BTC\", \n",
    "    \"BTN\", \"BWP\", \"BYN\", \"BYR\", \"BZD\", \"CAD\", \"CDF\", \"CHF\", \"CLF\", \"CLP\", \"CNH\", \n",
    "    \"CNY\", \"COP\", \"CRC\", \"CUC\", \"CUP\", \"CVE\", \"CZK\", \"DJF\", \"DKK\", \"DOP\", \"DZD\", \n",
    "    \"EGP\", \"ERN\", \"ETB\", \"EUR\", \"FJD\", \"FKP\", \"GBP\", \"GEL\", \"GGP\", \"GHS\", \"GIP\", \n",
    "    \"GMD\", \"GNF\", \"GTQ\", \"GYD\", \"HKD\", \"HNL\", \"HRK\", \"HTG\", \"HUF\", \"IDR\", \"ILS\", \n",
    "    \"IMP\", \"INR\", \"IQD\", \"IRR\", \"ISK\", \"JEP\", \"JMD\", \"JOD\", \"JPY\", \"KES\", \"KGS\", \n",
    "    \"KHR\", \"KMF\", \"KPW\", \"KRW\", \"KWD\", \"KYD\", \"KZT\", \"LAK\", \"LBP\", \"LKR\", \"LRD\", \n",
    "    \"LSL\", \"LTL\", \"LVL\", \"LYD\", \"MAD\", \"MDL\", \"MGA\", \"MKD\", \"MMK\", \"MNT\", \"MOP\", \n",
    "    \"MRU\", \"MUR\", \"MVR\", \"MWK\", \"MXN\", \"MYR\", \"MZN\", \"NAD\", \"NGN\", \"NIO\", \"NOK\", \n",
    "    \"NPR\", \"NZD\", \"OMR\", \"PAB\", \"PEN\", \"PGK\", \"PHP\", \"PKR\", \"PLN\", \"PYG\", \"QAR\", \n",
    "    \"RON\", \"RSD\", \"RUB\", \"RWF\", \"SAR\", \"SBD\", \"SCR\", \"SDG\", \"SEK\", \"SGD\", \"SHP\", \n",
    "    \"SLE\", \"SLL\", \"SOS\", \"SRD\", \"STD\", \"SVC\", \"SYP\", \"SZL\", \"THB\", \"TJS\", \"TMT\", \n",
    "    \"TND\", \"TOP\", \"TRY\", \"TTD\", \"TWD\", \"TZS\", \"UAH\", \"UGX\", \"USD\", \"UYU\", \"UZS\", \n",
    "    \"VEF\", \"VES\", \"VND\", \"VUV\", \"WST\", \"XAF\", \"XAG\", \"XAU\", \"XCD\", \"XDR\", \"XOF\", \n",
    "    \"XPF\", \"YER\", \"ZAR\", \"ZMK\", \"ZMW\", \"ZWL\"\n",
    "                            )\n",
    "\n",
    "\n",
    "currencychoose2.place(x=300,y=70)\n",
    "currencychoose2.current()\n",
    "\n",
    "text = Text(root,height=7,width=52,font=('verdana','10','bold'))\n",
    "text.place(x=100,y=120)\n",
    "\n",
    "B = Button(root, text=\"Search\",command=show_data,font=('verdana','10','bold'),borderwidth=2,bg=\"red\",fg=\"white\")\n",
    "B.place(x=20,y=120)\n",
    "\n",
    "clear= Button(root,text=\"Clear\",command=clear,font=('verdana','10','bold'),borderwidth=2,bg=\"blue\",fg=\"white\")\n",
    "clear.place(x=20,y=170)\n",
    "\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f32d61f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
